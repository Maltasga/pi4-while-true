-- CREATE TABLE
CREATE TABLE CATEGORIA (

ID INT NOT NULL AUTO_INCREMENT,
GENERO CHAR NOT NULL,
NOME VARCHAR(50) NOT NULL,
PRIMARY KEY (ID)

) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;
CREATE TABLE Colecao
(
    ID INT NOT NULL AUTO_INCREMENT,
    NOME VARCHAR(50) NOT NULL,    
    PRIMARY KEY (ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;
CREATE TABLE Marca
(
    ID INT NOT NULL AUTO_INCREMENT,
    NOME VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;
CREATE TABLE Produto
(
    ID INT NOT NULL AUTO_INCREMENT,
    NOME VARCHAR(50) NOT NULL,
    DESCRICAO VARCHAR(100),
    ID_CATEGORIA INT NOT NULL,
    ID_MARCA INT NOT NULL,
    ID_COLECAO INT NOT NULL,
    VALOR DOUBLE NOT NULL,
    ATIVO BOOLEAN DEFAULT TRUE,
    DT_CADASTRO DATETIME DEFAULT NOW(),
    PRIMARY KEY (ID),
    FOREIGN KEY (ID_CATEGORIA) REFERENCES Categoria(ID),
    FOREIGN KEY (ID_COLECAO) REFERENCES Colecao(ID),
    FOREIGN KEY (ID_MARCA) REFERENCES Marca(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;
CREATE TABLE Estoque
(
    ID BIGINT NOT NULL AUTO_INCREMENT,
    ID_PRODUTO INT NOT NULL,
    QUANTIDADE INT NOT NULL,
    TAMANHO VARCHAR(5) NOT NULL,
    PRIMARY KEY (ID, ID_PRODUTO, TAMANHO),
    FOREIGN KEY (ID_PRODUTO)  REFERENCES PRODUTO(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;
CREATE TABLE ProdutoImagem
(
    ID INT NOT NULL AUTO_INCREMENT,
    ID_PRODUTO INT NOT NULL,
    Nome VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID, ID_PRODUTO),
    FOREIGN KEY (ID_PRODUTO) REFERENCES Produto(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE Cliente (
    ID INT NOT NULL AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    CPF VARCHAR(14) NOT NULL UNIQUE,
    EMAIL VARCHAR(50) NOT NULL,
    DT_NASCIMENTO DATE NOT NULL,
    SEXO CHAR,
    TELEFONE VARCHAR(12),
    CELULAR VARCHAR(13) NOT NULL,
    SENHA VARCHAR(200) NULL,
    ATIVO BOOLEAN DEFAULT TRUE,
    DT_CADASTRO DATETIME DEFAULT NOW(),    
    PRIMARY KEY (ID, CPF)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE ENDERECO(

    ID INT NOT NULL AUTO_INCREMENT,
    CLIENTE_ID INT NOT NULL,
    LOGRADOURO VARCHAR (100) NOT NULL,
    NUMERO VARCHAR(10) NOT NULL,
    COMPLEMENTO VARCHAR (50),
    CIDADE VARCHAR(50) NOT NULL,
    UF VARCHAR(2) NOT NULL,
    CEP VARCHAR (9) NOT NULL,
    PRINCIPAL BOOLEAN DEFAULT FALSE,
    ATIVO BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (ID, CLIENTE_ID),
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTE(ID)

) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE Perfil
(
    ID INT NOT NULL UNIQUE,
    Nome VARCHAR(50) NOT NULL UNIQUE,
    PRIMARY KEY (ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE Usuario
(
    ID INT NOT NULL AUTO_INCREMENT,
    NOME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100),
    LOGIN VARCHAR(30) NOT NULL UNIQUE,
    SENHA VARCHAR(10000) NOT NULL,
    ID_PERFIL INT NOT NULL,
    ATIVO BOOLEAN NOT NULL DEFAULT TRUE,
    DT_CADASTRO DATETIME NOT NULL DEFAULT NOW(),
    PRIMARY KEY (ID),
    FOREIGN KEY (ID_PERFIL) REFERENCES Perfil(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE CARRINHO
(
    ID BIGINT NOT NULL AUTO_INCREMENT,
    DT_TRANSACAO DATETIME NOT NULL DEFAULT NOW(),
    USUARIO_ID INT,
    CLIENTE_ID INT NOT NULL,
    VL_TOTAL DECIMAL(9, 2) NOT NULL,
    PROTOCOLO BIGINT,
    PRIMARY KEY(ID),
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTE(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE CARRINHOITEM
(
    ID BIGINT NOT NULL AUTO_INCREMENT,
    CARRINHO_ID BIGINT NOT NULL,
    PRODUTO_ID INT NOT NULL,
    QUANTIDADE INT NOT NULL,
    TAMANHO VARCHAR(5) NOT NULL,
    VL_ITEM DECIMAL(9, 2) NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (CARRINHO_ID) REFERENCES CARRINHO(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE TICKETSAC
(
    ID BIGINT NOT NULL AUTO_INCREMENT,
    DT_TRANSACAO DATETIME NOT NULL DEFAULT NOW(),
    CLIENTE_ID INT NOT NULL,
    PROTOCOLO BIGINT,
	DESCRICAO VARCHAR(60) NOT NULL,
	TIPO_ERRO VARCHAR(30) NOT NULL,
	STATUS VARCHAR(10) NOT NULL DEFAULT 'PENDENTE',
    PRIMARY KEY(ID),
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTE(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE promocao
(
    ID INT NOT NULL AUTO_INCREMENT,
    PRODUTO_ID INT NOT NULL,
    DT_INICIO DATETIME NOT NULL DEFAULT NOW(),
    DT_FIM DATETIME,
    PERC_DESCONTO DOUBLE NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (PRODUTO_ID) REFERENCES produto(ID)
) DEFAULT CHARACTER SET utf8
  DEFAULT COLLATE utf8_general_ci;

CREATE TABLE StatusCarrinho
(
    ID INT NOT NULL AUTO_INCREMENT,
    STATUS_ID INT NOT NULL,
    STATUS VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
);

CREATE TABLE StatusCarrinhoDetalhe
(
    ID INT NOT NULL AUTO_INCREMENT,
    STATUS_ID INT NOT NULL,
    CARRINHO_ID INT NOT NULL,
    DT_CADASTRO DATETIME NOT NULL DEFAULT NOW(), 
    PRIMARY KEY (ID)
);

-- INSERT 
INSERT INTO CATEGORIA (GENERO, NOME) VALUES 
    ('F', 'Blusa'), ('F', 'Camisa'), ('F', 'Camiseta'), ('F', 'Moletom'),
    ('F', 'Casaco'), ('F', 'Jaqueta'), ('F', 'Tric?'), ('F', 'Cal?a'), ('F', 'Bermuda'),
    ('F', 'Saia'), ('F', 'Legging'), ('F', 'Vestido'), ('F', 'Macac?o'), ('F', 'Jardineira'),
    ('M', 'Blusa'), ('M', 'Camisa'), ('M', 'Camiseta'),   ('M', 'Moletom'),  ('M', 'Casaco'),  
    ('M', 'Jaqueta'), ('M', 'Tric?'),  ('M', 'Cal?a'),   ('M', 'Bermuda'),  ('M', 'Legging'), 
    ('M', 'Macac?o'),    ('M', 'Jardineira');

INSERT INTO COLECAO (NOME) 
    VALUES 
    ('Casual 2k17'), ('Prima Vera'), ('Ver?o Ver?o');

INSERT INTO MARCA (NOME) 
    VALUES 
    ('Calvin Klein'), ('Aramis'), ('Lacoste'), ('Joss'), ('Reserva'), 
    ('Tommy Hilfiger'), ('Colcci'), ('Billabong');

INSERT INTO PRODUTO (NOME, DESCRICAO, ID_CATEGORIA, ID_MARCA, ID_COLECAO, VALOR) 
    VALUES
    ('produto teste 1', 'descricao do produto teste 1', 1, 1, 1, 87.79),
    ('produto teste 2', 'descricao do produto teste 2', 12, 5, 3, 57.30),
    ('produto teste 3', 'descricao do produto teste 3', 20, 7, 3, 99.90),
    ('produto teste 4', 'descricao do produto teste 3', 9, 7, 3, 99.90),
    ('produto teste 5', 'descricao do produto teste 3', 17, 7, 3, 99.90);

INSERT INTO Perfil (ID, NOME)
    VALUES 
    (100, 'Administrador'),
    (200, 'Gestor Backoffice'),
    (210, 'Operador Backoffice'),
    (300, 'Operacao');

INSERT INTO cliente (NOME, CPF, EMAIL, DT_NASCIMENTO, SEXO, TELEFONE, CELULAR, SENHA)
    VALUES ('Cliente 001', '21233366898', 'cliente001@email.com','1994-01-01' ,'F', '123456', '654321', '123');

INSERT INTO promocao (PRODUTO_ID, DT_INICIO, DT_FIM, PERC_DESCONTO)
    VALUES
    (1, NOW(), NULL, 10.0)
    , (2, NOW(), DATE_ADD(NOW(), INTERVAL 30 DAY), 50.0)
    , (3, NOW(), NULL, 15.0)
    , (4, DATE_ADD(NOW(), INTERVAL -60 DAY), DATE_ADD(NOW(), INTERVAL -55 DAY), 80.0)
    , (4, DATE_ADD(NOW(), INTERVAL -54 DAY), DATE_ADD(NOW(), INTERVAL 5 DAY), 80.0);

INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (1,30,'P');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (1,5,'M');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (1,30,'G');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (1,30,'GG');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (2,30,'P');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (2,5,'M');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (2,30,'G');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (2,30,'GG');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (3,30,'P');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (3,5,'M');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (3,30,'G');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (3,30,'GG');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (4,20,'P');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (4,5,'M');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (4,20,'G');
INSERT INTO ESTOQUE (ID_PRODUTO,QUANTIDADE,TAMANHO) VALUES (4,20,'GG');

-- FIM INSERT

-- CREATE VIEW
CREATE VIEW SELECT_CLIENTE_COMPLETO
(
    ID,
    NOME,
    CPF,
    EMAIL,
    DT_NASCIMENTO,
    SEXO,
    TELEFONE,
    CELULAR,
    DT_CADASTRO,
    LOGRADOURO,
    NUMERO,
    COMPLEMENTO,
    CIDADE,
    UF,
    CEP
)
AS
(
    SELECT
        C.ID,
        C.NOME,
        C.CPF,
        C.EMAIL,
        C.DT_NASCIMENTO,
        C.SEXO,
        C.TELEFONE,
        C.CELULAR,
        C.DT_CADASTRO,
        E.LOGRADOURO,
        E.NUMERO,
        E.COMPLEMENTO,
        E.CIDADE,
        E.UF,
        E.CEP
    FROM CLIENTE C
        JOIN ENDERECO E ON E.CLIENTE_ID = C.ID AND E.PRINCIPAL = TRUE
    WHERE C.ATIVO = TRUE
);

CREATE VIEW SELECT_DETALHE_PEDIDO
(
    ID_COMPRA
    ,PROTOCOLO
    ,QUANTIDADE
    ,PRODUTO_ID
    ,NOME_PRODUTO
    ,VALOR
    ,NOME_CLIENTE
)
AS 
(
SELECT
    c.ID AS ID_COMPRA,
    c.PROTOCOLO,
    ci.QUANTIDADE,
    p.ID AS PRODUTO_ID,
    p.NOME AS NOME_PRODUTO,
    p.VALOR,
    ct.NOME AS NOME_CLIENTE
FROM carrinho c
INNER JOIN carrinhoitem ci ON ci.CARRINHO_ID = c.ID
INNER JOIN cliente ct ON ct.ID = c.CLIENTE_ID
INNER JOIN produto p on p.ID = ci.PRODUTO_ID
);

CREATE VIEW SELECT_PEDIDO_CLIENTE
(
    CARRINHO_ID,
    PROTOCOLO,
    DT_COMPRA,
    CLIENTE_ID,
    STATUS,
    DT_ATUALIZACAO_STATUS
)
AS
(
SELECT
    c.ID AS CARRINHO_ID,
    c.PROTOCOLO,
    c.DT_TRANSACAO AS DT_COMPRA,
    ct.ID AS CLIENTE_ID,
    s.STATUS,
    sc.DT_CADASTRO AS DT_ATUALIZACAO_STATUS
FROM carrinho c
INNER JOIN statusCarrinhoDetalhe sc on sc.CARRINHO_ID = c.ID
INNER JOIN statusCarrinho s on s.STATUS_ID = sc.STATUS_ID
INNER JOIN cliente ct ON ct.ID = c.CLIENTE_ID
);

CREATE VIEW SELECT_PEDIDO_CLIENTE_DETALHES
(
    PRODUTO_ID,
    NOME_PRODUTO,
    VL_UNITARIO,
    DESCRICAO,
    QUANTIDADE,
    TAMANHO,
    CARRINHO_ID,
    DT_COMPRA,
    PROTOCOLO,
    NOME_CLIENTE
)
AS 
(
SELECT
    p.ID AS PRODUTO_ID,
    p.NOME AS NOME_PRODUTO,
    p.VALOR AS VL_UNITARIO,
    p.DESCRICAO,
    ci.QUANTIDADE,
    ci.TAMANHO,
    c.ID AS CARRINHO_ID,
    c.DT_TRANSACAO AS DT_COMPRA,
    c.PROTOCOLO,
    ct.NOME AS NOME_CLIENTE
FROM carrinho c
INNER JOIN carrinhoitem ci ON ci.CARRINHO_ID = c.ID
INNER JOIN cliente ct ON ct.ID = c.CLIENTE_ID
INNER JOIN produto p on p.ID = ci.PRODUTO_ID
);

CREATE VIEW SELECT_PRODUTO_COMPLETO
(
    ID,
    NOME,
    DESCRICAO,
    VALOR,
    ATIVO,
    DT_CADASTRO,
    ID_CATEGORIA,
    GENERO,
    NM_CATEGORIA,
    ID_MARCA,
    NM_MARCA,
    ID_COLECAO,
    NM_COLECAO,
    PERC_DESCONTO
)
AS 
(
    SELECT
        P.ID,
        P.NOME,
        P.DESCRICAO,
        P.VALOR,
        P.ATIVO,
        P.DT_CADASTRO,
        CT.ID AS ID_CATEGORIA,
        CT.GENERO,
        CT.NOME AS NM_CATEGORIA,
        M.ID AS ID_MARCA,
        M.NOME AS NM_MARCA,
        C.ID AS ID_COLECAO,
        C.NOME AS NM_COLECAO,
        PROMO.PERC_DESCONTO
    FROM PRODUTO P
        JOIN MARCA M ON M.ID = P.ID_MARCA
        JOIN COLECAO C ON C.ID = P.ID_COLECAO
        JOIN CATEGORIA CT ON CT.ID = P.ID_CATEGORIA
        LEFT JOIN PROMOCAO PROMO ON PROMO.PRODUTO_ID = P.ID 
                AND (PROMO.DT_INICIO <= NOW() AND (PROMO.DT_FIM IS NULL OR PROMO.DT_FIM >= NOW()))
);

CREATE VIEW SELECT_PROMOCAO_PRODUTO
(
    PRODUTO_ID
    , PRODUTO_NOME
    , PROMO_ID
    , DT_INICIO
    , DT_FIM
    , PERC_DESCONTO
)
AS 
(
    SELECT
        prod.ID AS 'PRODUTO_ID',
        prod.NOME as 'PRODUTO_NOME',
        promo.ID AS 'PROMO_ID',
        promo.DT_INICIO,
        promo.DT_FIM,
        promo.PERC_DESCONTO
    FROM produto prod
    LEFT JOIN promocao promo on promo.PRODUTO_ID = prod.ID
    ORDER BY promo.ID DESC
);

CREATE VIEW SELECT_STATUS_CARRINHO_COMPLETO
(
    ID,
    STATUS_ID,
    CARRINHO_ID,
    DT_CADASTRO,
    STATUS,
    NOME,
    PROTOCOLO,
    DT_TRANSACAO,
    VL_TOTAL
)
AS 
(
    SELECT 
        SD.ID,
        SD.STATUS_ID,
        SD.CARRINHO_ID,
        SD.DT_CADASTRO,
        S.STATUS,
        C.NOME,
        CR.PROTOCOLO,
        CR.DT_TRANSACAO,
        CR.VL_TOTAL
    FROM StatusCarrinhoDetalhe SD
    LEFT JOIN StatusCarrinho S ON S.STATUS_ID = SD.STATUS_ID
    INNER JOIN Carrinho CR ON CR.ID = SD.CARRINHO_ID
    INNER JOIN Cliente C ON C.ID = CR.CLIENTE_ID
);

CREATE VIEW SELECT_USUARIO_COMPLETO
(
    ID,
    NOME,
    EMAIL,
    LOGIN,
    SENHA,
    ATIVO,
    DT_CADASTRO,
    ID_PERFIL,
    NM_PERFIL
)
AS
(
    SELECT
        U.ID,
        U.NOME,
        U.EMAIL,
        U.LOGIN,
        U.SENHA,
        U.ATIVO,
        U.DT_CADASTRO,
        P.ID AS 'ID_PERFIL',
        P.NOME AS 'NM_PERFIL'
    FROM Usuario U
        JOIN Perfil P on P.ID = U.ID_PERFIL
);
-- FIM CREATE VIEW